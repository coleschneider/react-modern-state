# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input CreateTaskInput {
  color: TaskColor
  description: String
  dueDate: DateTime
  parentId: ID
  remindMeAt: DateTime
  startDate: DateTime
  tags: [String!]
  title: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DeleteTaskPayload {
  deleted: Task
  updated: [Task!]
}

input MoveTaskInput {
  id: ID!
  index: Float!
}

type Mutation {
  createTask(input: CreateTaskInput!): TaskPayload!
  deleteTask(input: TaskIdInput!): DeleteTaskPayload!
  moveTask(input: MoveTaskInput!): TasksPayload!
  toggleTask(input: ToggleTaskInput!): TaskPayload!
  updateTask(input: UpdateTaskInput!): TaskPayload!
}

"""An object with a global ID."""
interface Node {
  """The global ID of the object."""
  id: ID!
}

type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Query {
  me: User

  """Fetches an object given its global ID."""
  node(
    """The global ID of the object."""
    id: ID!
  ): Node

  """Fetches objects given their global IDs."""
  nodes(
    """The global IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  task(id: String!): Task!
  taskTags: TaskTagsPayload!
  tasks(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): TaskConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
}

type Task {
  color: TaskColor
  completedAt: DateTime
  description: String
  dueDate: DateTime
  id: ID!
  index: Float!
  parent: Task!
  remindMeAt: DateTime
  startDate: DateTime
  subtasks: [Task!]
  tags: [String!]
  title: String!
  user: User!
}

enum TaskColor {
  Amber
  Blue
  Brown
  Cyan
  Green
  Grey
  Indigo
  Lime
  Orange
  Pink
  Purple
  Red
  Teal
}

type TaskConnection {
  """A list of edges."""
  edges: [TaskEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

type TaskEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Task!
}

input TaskIdInput {
  id: ID!
}

type TaskPayload {
  task: Task
}

type TaskTagsPayload {
  tags: [String!]
}

type TasksPayload {
  tasks: [Task!]
}

input ToggleTaskInput {
  completed: Boolean!
  id: ID!
}

input UpdateTaskInput {
  color: TaskColor
  completedAt: DateTime
  description: String
  dueDate: DateTime
  id: ID!
  remindMeAt: DateTime
  startDate: DateTime
  tags: [String!]
  title: String
}

type User {
  email: String!
  id: ID!
  image: String
  name: String
  tasks: [Task!]!
}

type UserConnection {
  """A list of edges."""
  edges: [UserEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

type UserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: User!
}
